{"version":3,"file":"chunk-arch-select-adder.js","sources":["../../../../../web-components/src/archSelectAdder/src/arch-select-adder.ts"],"sourcesContent":["import { LitElement, TemplateResult, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\n\nimport { DefaultSelectElementPromptText } from \"../../lib/constants\";\n\n@customElement(\"arch-select-adder\")\nexport class ArchSelectAdder<T> extends LitElement {\n  @property() emptyOptionsPlaceholder: TemplateResult = html``;\n  @property({ type: String }) deselectButtonText = \"remove\";\n  @property({ type: Number }) headingLevel = 3;\n  @property() labelGetter!: (obj: T) => string;\n  @property({ type: Array }) options!: Array<T>;\n  @property() optionsSortCompareFn: undefined | ((a: T, b: T) => number) =\n    undefined;\n  @property() readOnlyMessage: undefined | TemplateResult = undefined;\n  @property({ type: Array }) selectedOptions!: Array<T>;\n  @property({ type: Array }) selectedOptionsTitle = \"Selected Options\";\n  @property({ type: String }) selectCtaText = \"Select value to add\";\n  @property() valueGetter!: (obj: T) => string;\n\n  @state() availableOptions: Array<T> = [];\n  @state() disabled = false;\n\n  // Set delegatesFocus=true so that we can restore focus to the job button\n  // on arch-global-modal close.\n  static shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  private sortByLabel(a: T, b: T) {\n    /* Default optionsSortCompareFn */\n    const { labelGetter } = this;\n    const aLabel = labelGetter(a);\n    const bLabel = labelGetter(b);\n    if (aLabel > bLabel) {\n      return 1;\n    } else if (aLabel < bLabel) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  private heading(text: string): TemplateResult {\n    const { headingLevel } = this;\n    switch (headingLevel) {\n      case 1:\n        return html`<h1>${text}</h1>`;\n        break;\n      case 2:\n        return html`<h2>${text}</h2>`;\n        break;\n      case 3:\n        return html`<h3>${text}</h3>`;\n        break;\n      case 4:\n        return html`<h4>${text}</h4>`;\n        break;\n      case 5:\n        return html`<h5>${text}</h5>`;\n        break;\n      case 6:\n        return html`<h6>${text}</h6>`;\n        break;\n      default:\n        return html``;\n    }\n  }\n\n  render() {\n    const {\n      deselectButtonText,\n      disabled,\n      emptyOptionsPlaceholder,\n      labelGetter,\n      options,\n      selectCtaText,\n      readOnlyMessage,\n      selectedOptions,\n      selectedOptionsTitle,\n      valueGetter,\n    } = this;\n\n    if (options.length === 0) {\n      return emptyOptionsPlaceholder;\n    }\n\n    this.updateAvailableOptions();\n\n    return html`\n      ${selectedOptions.length === 0\n        ? html``\n        : html`\n            ${this.heading(selectedOptionsTitle)}\n            <ul>\n              ${selectedOptions.map(\n                (x) =>\n                  html`<li>\n                    ${labelGetter(x)}\n                    ${readOnlyMessage\n                      ? html``\n                      : html`\n                          <button\n                            ?disabled=${disabled}\n                            @click=${(e: Event) =>\n                              this.deselectOption(\n                                e.target as HTMLButtonElement,\n                                x\n                              )}\n                          >\n                            ${deselectButtonText}\n                          </button>\n                        `}\n                  </li>`\n              )}\n            </ul>\n          `}\n      ${readOnlyMessage\n        ? readOnlyMessage\n        : this.availableOptions.length === 0\n        ? html``\n        : html`\n            <label>\n              ${selectCtaText}\n              <select ?disabled=${disabled} @change=${this.selectHandler}>\n                <option selected value>\n                  ${DefaultSelectElementPromptText}\n                </option>\n                ${this.availableOptions.map(\n                  (x) =>\n                    html`<option value=\"${valueGetter(x)}\">\n                      ${labelGetter(x)}\n                    </option>`\n                )}\n              </select>\n            </label>\n          `}\n    `;\n  }\n\n  updateAvailableOptions() {\n    const { options, optionsSortCompareFn, selectedOptions, valueGetter } =\n      this;\n    const selectedValues = new Set(selectedOptions.map(valueGetter));\n    this.availableOptions = options\n      .filter((x) => !selectedValues.has(valueGetter(x)))\n      .sort(optionsSortCompareFn ?? this.sortByLabel.bind(this));\n  }\n\n  private selectOption(option: T) {\n    this.selectedOptions.push(option);\n    this.updateAvailableOptions();\n  }\n\n  private get revertFn() {\n    /* Return a function that can be used to revert to the current state. */\n    const currentSelectedOptions = [...this.selectedOptions];\n    return () => {\n      this.selectedOptions = currentSelectedOptions;\n      this.updateAvailableOptions();\n    };\n  }\n\n  private deselectOption(buttonEl: HTMLButtonElement, option: T) {\n    const { revertFn, valueGetter } = this;\n    const optionValue = valueGetter(option);\n    this.selectedOptions = this.selectedOptions.filter(\n      (x) => valueGetter(x) !== optionValue\n    );\n    this.updateAvailableOptions();\n    this.onChange(revertFn, buttonEl);\n  }\n\n  private selectHandler(e: Event) {\n    const { options, revertFn, valueGetter } = this;\n    const selectEl = e.target as HTMLSelectElement;\n    const optionValue = selectEl.value;\n    // Ignore the first placeholder option.\n    if (optionValue === \"\") {\n      return;\n    }\n    this.selectOption(\n      options.find((x) => String(valueGetter(x)) === optionValue) as T\n    );\n    // Ensure that the first, placeholder option is reselected.\n    (selectEl.children[0] as HTMLOptionElement).selected = true;\n    this.onChange(revertFn, selectEl);\n  }\n\n  /**\n   * @param {() => void} revertFn - revert to the previous selected option state\n   * @param {HTMLElement} srcEl - the interactive element that triggered the change\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  onChange(revertFn: () => void, srcEl: HTMLElement) {}\n}\n"],"names":["ArchSelectAdder","LitElement","constructor","this","emptyOptionsPlaceholder","html","deselectButtonText","headingLevel","optionsSortCompareFn","undefined","readOnlyMessage","selectedOptionsTitle","selectCtaText","availableOptions","disabled","sortByLabel","a","b","labelGetter","aLabel","bLabel","heading","text","render","options","selectedOptions","valueGetter","length","updateAvailableOptions","map","x","e","deselectOption","target","selectHandler","DefaultSelectElementPromptText","selectedValues","Set","filter","has","sort","bind","selectOption","option","push","revertFn","currentSelectedOptions","buttonEl","optionValue","onChange","selectEl","value","find","String","children","selected","srcEl","shadowRootOptions","delegatesFocus","__decorate","property","prototype","type","Number","Array","state","customElement"],"mappings":"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"}