{"version":3,"file":"arch-dataset-publishing-card.js","sources":["../../../../../web-components/src/archDatasetPublishingCard/src/styles.ts","../../../../../web-components/src/archDatasetPublishingCard/src/arch-dataset-publishing-card.ts"],"sourcesContent":["import { css } from \"lit\";\n\nimport { global, defaultButtonBgColor } from \"../../lib/styles\";\n\nexport default [\n  global,\n  css`\n    :host > div.container {\n      display: flex;\n    }\n\n    :host > div.container > div:first-child {\n      flex-grow: 1;\n    }\n\n    :host > div.container > button {\n      align-self: flex-start;\n    }\n\n    :host > div.container > button.cancel {\n      margin-right: 0.5rem;\n    }\n\n    h2 {\n      font-size: 1em;\n      margin: 0 0 0.75em 0;\n    }\n\n    /* Prevent items from overflow container: https://stackoverflow.com/a/66689926 */\n    div.detail {\n      min-width: 0;\n    }\n\n    div.metadata-display > dl,\n    div.metadata-display > arch-loading-indicator,\n    div.metadata-display > i {\n      margin-left: 2rem;\n    }\n\n    div.metadata-edit {\n      background-color: ${defaultButtonBgColor};\n      border-radius: 8px;\n      padding: 1rem 1.5rem;\n    }\n\n    dl > div,\n    dl > div:last-child {\n      margin-bottom: 0.75em;\n    }\n\n    [hidden] {\n      display: none;\n    }\n\n    div.form-buttons {\n      text-align: right;\n    }\n  `,\n];\n","import { LitElement, html } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators.js\";\n\nimport ArchAPI from \"../../lib/ArchAPI\";\nimport { isoStringToDateString } from \"../../lib/helpers\";\nimport {\n  Dataset,\n  PublishedDatasetInfo,\n  PublishedDatasetMetadata,\n  PublishedDatasetMetadataApiResponse,\n  PublishedDatasetMetadataJSONSchema,\n  PublishedDatasetMetadataJSONSchemaProps,\n  ResponseError,\n} from \"../../lib/types\";\nimport \"../../archLoadingIndicator/index\";\nimport \"../../archDatasetMetadataForm/index\";\nimport { ArchDatasetMetadataForm } from \"../../archDatasetMetadataForm/index\";\n\nimport styles from \"./styles\";\nimport * as _metadataSchema from \"../../archDatasetMetadataForm/src/schema.json\";\n\nconst metadataSchema = _metadataSchema as PublishedDatasetMetadataJSONSchema;\nconst propertiesOrder = metadataSchema.propertiesOrder as Array<string>;\n\nenum PublishState {\n  Loading = 0,\n  Unpublished,\n  PrePublish,\n  Publishing,\n  Published,\n  Unpublishing,\n}\n\nenum MetadataState {\n  Displaying,\n  Editing,\n  Saving,\n}\n\nconst orderedMetadataKeys = Object.keys(\n  metadataSchema.properties as object\n).sort((a, b) =>\n  propertiesOrder.indexOf(a) < propertiesOrder.indexOf(b) ? -1 : 1\n) as Array<keyof PublishedDatasetMetadata>;\n\nfunction getMetadataKeyTitle(k: keyof PublishedDatasetMetadata): string {\n  // Note that I can't figure out how to properly annotate metadataSchema.properties\n  // using something like PropertiesSchema from ajv/lib/types/json-schema.\n  return (metadataSchema.properties as PublishedDatasetMetadataJSONSchemaProps)[\n    k\n  ].title as string;\n}\n\n@customElement(\"arch-dataset-publishing-card\")\nexport class ArchDatasetPublishingCard extends LitElement {\n  @property({ type: String }) datasetId!: Dataset[\"id\"];\n  @property({ type: String }) csrfToken!: string;\n  @property({ type: Boolean }) readOnly = false;\n\n  @state() pubState: PublishState = PublishState.Loading;\n  @state() pubInfo: undefined | PublishedDatasetInfo = undefined;\n\n  @state() metadataState = MetadataState.Displaying;\n  @state() metadata: undefined | PublishedDatasetMetadataApiResponse =\n    undefined;\n\n  @query(\"arch-dataset-metadata-form\") metadataForm!: ArchDatasetMetadataForm;\n\n  static styles = styles;\n\n  connectedCallback() {\n    super.connectedCallback();\n    void this._fetchInitialData();\n  }\n\n  private get _metadataFormData() {\n    /* Return the metadata <form> inputs as an object with Array-type values. */\n    const metadata: PublishedDatasetMetadataApiResponse = {};\n    const metadataPairs = Array.from(\n      new FormData(this.metadataForm.form).entries()\n    )\n      // Remove empty string values.\n      .filter(([, v]) => (v as string).trim() !== \"\")\n      // Replace any tabs with \" \" and \"\\n\" with \"<br>\", which should only ever\n      // occur in the case of <textarea>.\n      .map(([k, v]) => [\n        k,\n        (v as string).replaceAll(\"\\t\", \" \").replaceAll(\"\\n\", \"<br>\"),\n      ]) as Array<[keyof PublishedDatasetMetadataApiResponse, string]>;\n\n    for (const [name, value] of metadataPairs) {\n      metadata[name] = (metadata[name] ?? []).concat(value);\n    }\n    return metadata;\n  }\n\n  // TODO - make this less complex\n  // eslint-disable-next-line complexity\n  render() {\n    const { pubState, readOnly } = this;\n    if (pubState === PublishState.Loading) {\n      return html`<arch-loading-indicator></arch-loading-indicator>`;\n    }\n    const { metadata } = this;\n    const pubInfo = this.pubInfo as PublishedDatasetInfo;\n    return html`\n      <div class=\"container\">\n        <div class=\"detail\">\n          <dl>\n            <div>\n              <dt>Last Published</dt>\n              <dd>\n                ${pubState === PublishState.Published\n                  ? isoStringToDateString(pubInfo.time)\n                  : \"never\"}\n              </dd>\n            </div>\n            ${pubState !== PublishState.Published\n              ? html``\n              : html`\n                  <div>\n                    <dt>ARK</dt>\n                    <dd>\n                      <a href=\"https://ark.archive.org/${pubInfo.ark}\"\n                        >${pubInfo.ark}</a\n                      >\n                    </dd>\n                  </div>\n                `}\n          </dl>\n\n          <!-- Metadata section header -->\n          <h2>\n            ${pubState < PublishState.PrePublish ||\n            pubState === PublishState.Publishing\n              ? \"\"\n              : pubState === PublishState.PrePublish\n              ? html`<i>Enter Metadata</i>`\n              : \"Metadata\"}\n            ${pubState < PublishState.Published ||\n            this.metadataState === MetadataState.Editing ||\n            readOnly\n              ? \"\"\n              : html`\n                  <button\n                    class=\"text\"\n                    @click=${() => (this.metadataState = MetadataState.Editing)}\n                  >\n                    (edit)\n                  </button>\n                `}\n          </h2>\n\n          <!-- Metadata display list -->\n          <div\n            class=\"metadata-display\"\n            ?hidden=${pubState < PublishState.Published ||\n            this.metadataState === MetadataState.Editing}\n          >\n            ${metadata === undefined\n              ? html`<arch-loading-indicator></arch-loading-indicator>`\n              : Object.keys(metadata).length === 0\n              ? html`<i>none</i>`\n              : html`\n                  <dl>\n                    ${orderedMetadataKeys\n                      .filter((k) => metadata[k] !== undefined)\n                      .map((k) => {\n                        const title = getMetadataKeyTitle(k);\n                        let values = metadata[k] as string | Array<string>;\n                        if (!Array.isArray(values)) {\n                          values = [values];\n                        }\n                        return html`\n                          <div>\n                            <dt>${title}</dt>\n                            ${values.map((value) => html`<dd>${value}</dd>`)}\n                          </div>\n                        `;\n                      })}\n                  </dl>\n                `}\n          </div>\n\n          <!-- Metadata edit form -->\n          <div\n            class=\"metadata-edit\"\n            ?hidden=${pubState !== PublishState.PrePublish &&\n            this.metadataState !== MetadataState.Editing &&\n            this.metadataState !== MetadataState.Saving}\n          >\n            ${pubState !== PublishState.PrePublish &&\n            this.metadataState !== MetadataState.Editing &&\n            this.metadataState !== MetadataState.Saving\n              ? html``\n              : html`\n                  <arch-dataset-metadata-form\n                    .schema=${_metadataSchema}\n                    .data=${metadata ?? {}}\n                  >\n                  </arch-dataset-metadata-form>\n                `}\n            <br />\n            <div\n              ?hidden=${pubState === PublishState.PrePublish}\n              class=\"form-buttons\"\n            >\n              <button\n                type=\"button\"\n                @click=${() => (this.metadataState = MetadataState.Displaying)}\n                ?disabled=${this.metadataState === MetadataState.Saving}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                class=\"primary\"\n                @click=${() => this._saveMetadata()}\n                ?disabled=${this.metadataState === MetadataState.Saving}\n              >\n                ${this.metadataState === MetadataState.Saving\n                  ? html`<arch-loading-indicator\n                      style=\"--color: #fff\"\n                      text=\"Saving\"\n                    ></arch-loading-indicator>`\n                  : html`Save`}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <button\n          class=\"cancel\"\n          @click=${() => (this.pubState = PublishState.Unpublished)}\n          ?hidden=${pubState !== PublishState.PrePublish}\n        >\n          Cancel\n        </button>\n\n        <button\n          class=\"${pubState === PublishState.Unpublished\n            ? \"primary\"\n            : pubState === PublishState.PrePublish\n            ? \"success\"\n            : pubState === PublishState.Published\n            ? \"danger\"\n            : \"\"} ${readOnly ? \"hidden\" : \"\"}\"\n          ?disabled=${pubState === PublishState.Publishing ||\n          pubState === PublishState.Unpublishing}\n          @click=${this._publishButtonClickHandler}\n        >\n          ${pubState === PublishState.Unpublished\n            ? \"Publish\"\n            : pubState === PublishState.PrePublish\n            ? \"Publish Now\"\n            : pubState === PublishState.Publishing\n            ? \"Publish in progress...\"\n            : pubState === PublishState.Published\n            ? \"Unpublish\"\n            : pubState === PublishState.Unpublishing\n            ? \"Unpublishing...\"\n            : \"\"}\n        </button>\n      </div>\n    `;\n  }\n\n  private async _fetchInitialData() {\n    // Fetch any existing publication info.\n    const pubInfo = await this._fetchPubInfo();\n    if (!pubInfo) {\n      // No publication job exists for this dataset.\n      this.pubState = PublishState.Unpublished;\n      this.metadata = {};\n      return;\n    }\n    // Check whether the job is in progress.\n    if (pubInfo.complete === false) {\n      this.pubState = PublishState.Publishing;\n      // Check again for published info in 3 seconds.\n      setTimeout(() => void this._fetchInitialData(), 3000);\n      return;\n    }\n    // Dataset has been published.\n    this.pubInfo = pubInfo;\n    this.pubState = PublishState.Published;\n    // Fetch the published metadata.\n    void this._pollItemMetadata();\n  }\n\n  private async _pollItemMetadata() {\n    /* Poll for the item metadata and save it once available. */\n    const { pubState } = this;\n    const metadata = await this._fetchItemMetadata();\n    if (metadata === undefined && pubState === PublishState.Published) {\n      // Try again in 3 seconds.\n      setTimeout(() => void this._pollItemMetadata(), 3000);\n    }\n    // Got it.\n    this.metadata = metadata;\n  }\n\n  private async _fetchPubInfo() {\n    /* Attempt to retrieve the info for any existing published dataset */\n    const { datasetId } = this;\n    try {\n      return await ArchAPI.datasets.publication.info(datasetId);\n    } catch (e) {\n      if (!(e instanceof ResponseError) || e.response.status !== 404) {\n        console.error(e);\n      }\n      return undefined;\n    }\n  }\n\n  private async _fetchItemMetadata() {\n    /* Attempt to retrieve the published item metadata */\n    const { datasetId } = this;\n    try {\n      return await ArchAPI.datasets.publication.metadata.get(datasetId);\n    } catch (e) {\n      if (!(e instanceof ResponseError) || e.response.status !== 404) {\n        console.error(e);\n      }\n      return undefined;\n    }\n  }\n\n  private _publishButtonClickHandler() {\n    const metadataForm = this.metadataForm;\n    switch (this.pubState) {\n      case PublishState.Unpublished:\n        this.pubState = PublishState.PrePublish;\n        break;\n      case PublishState.PrePublish:\n        if (metadataForm.form.checkValidity()) {\n          void this._publish();\n        } else {\n          metadataForm.form.reportValidity();\n        }\n        break;\n      case PublishState.Published:\n        if (\n          window.confirm(\"Are you sure you want to unpublish this dataset?\")\n        ) {\n          void this._unpublish();\n        }\n        break;\n    }\n  }\n\n  private async _publish() {\n    const { csrfToken, datasetId, _metadataFormData: metadata } = this;\n    await fetch(`/api/datasets/${datasetId}/publication`, {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      headers: { \"X-CSRFToken\": csrfToken },\n      mode: \"cors\",\n      body: JSON.stringify(metadata),\n    });\n    this.pubState = PublishState.Publishing;\n    // Start polling for pub info after a lengthy timeout in order to\n    // give the backend time to register the job.\n    setTimeout(() => void this._fetchInitialData(), 30000);\n  }\n\n  private async _unpublish() {\n    const { datasetId } = this;\n    this.pubState = PublishState.Unpublishing;\n    await ArchAPI.datasets.publication.unpublish(datasetId);\n    this.pubState = PublishState.Unpublished;\n    // Call fetchInitialData to reset the component state.\n    void this._fetchInitialData();\n  }\n\n  private async _saveMetadata() {\n    const { datasetId, _metadataFormData: metadata } = this;\n    this.metadata = metadata;\n    this.metadataState = MetadataState.Saving;\n    // Add empty array values for all unspecified metadata fields in order to delete\n    // any existing values from the item.\n    const finalMetadata = Object.assign(\n      Object.fromEntries(orderedMetadataKeys.map((k) => [k, []])),\n      metadata\n    ) as PublishedDatasetMetadata;\n    await ArchAPI.datasets.publication.metadata.update(\n      datasetId,\n      finalMetadata\n    );\n    this.metadataState = MetadataState.Displaying;\n  }\n}\n\n// Injects the tag into the global name space\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"arch-dataset-publishing-card\": ArchDatasetPublishingCard;\n  }\n}\n"],"names":["styles","global","css","defaultButtonBgColor","metadataSchema","_metadataSchema","propertiesOrder","PublishState","MetadataState","orderedMetadataKeys","Object","keys","properties","sort","a","b","indexOf","ArchDatasetPublishingCard","LitElement","constructor","this","readOnly","pubState","Loading","pubInfo","undefined","metadataState","Displaying","metadata","connectedCallback","super","_fetchInitialData","_metadataFormData","metadataPairs","Array","from","FormData","metadataForm","form","entries","filter","v","trim","map","k","replaceAll","name","value","_a","concat","render","html","Published","isoStringToDateString","time","ark","PrePublish","Publishing","Editing","length","title","getMetadataKeyTitle","values","isArray","Saving","_saveMetadata","Unpublished","Unpublishing","_publishButtonClickHandler","async","_fetchPubInfo","complete","setTimeout","_pollItemMetadata","_fetchItemMetadata","datasetId","ArchAPI","datasets","publication","info","e","ResponseError","response","status","console","error","get","checkValidity","_publish","reportValidity","window","confirm","_unpublish","csrfToken","fetch","method","credentials","headers","mode","body","JSON","stringify","unpublish","finalMetadata","assign","fromEntries","update","__decorate","property","type","String","prototype","Boolean","state","query","customElement"],"mappings":"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"}