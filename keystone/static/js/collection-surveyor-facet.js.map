{"version":3,"file":"collection-surveyor-facet.js","sources":["../../../../../web-components/src/collectionSurveyorFacet/src/collection-surveyor-facet.ts"],"sourcesContent":["import { html, css, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\n\nimport { FacetResultMap } from \"../../lib/types\";\nimport { EventHelpers } from \"../../lib/eventHelpers\";\n\n@customElement(\"collection-surveyor-facet\")\nexport class CollectionSurveyorFacet extends LitElement {\n  @property({ type: String }) facetField = \"\";\n\n  @property({ type: Array }) facetFieldResults: FacetResultMap[] = [];\n\n  @property({ type: Array }) selectedfacetFieldResults: string[] = [];\n\n  readableFacetFieldName(text: string) {\n    // convert field name into a more readable form - eg. 'f_organizationName' --> 'Organization Name'\n\n    const camelCasefield = text.split(\"_\")[1]; // remove 'f_' prefix\n    const fieldNameWordsSeparated = camelCasefield.split(/(?=[A-Z])/); // split on capital letter\n\n    return fieldNameWordsSeparated\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \"); // capitalize each word and join with spaces\n  }\n\n  handleSelectFacet(facetName: string) {\n    if (!this.selectedfacetFieldResults.includes(facetName)) {\n      this.emitEvent(\"facet-selected\", {\n        facetFieldName: this.facetField,\n        facetName: facetName,\n      });\n    }\n  }\n\n  handleDeselectFacet(facetName: string) {\n    this.emitEvent(\"facet-deselected\", {\n      facetFieldName: this.facetField,\n      facetName: facetName,\n    });\n  }\n\n  private emitEvent(eventName: string, detail = {}) {\n    this.dispatchEvent(\n      EventHelpers.createEvent(eventName, detail ? { detail } : {})\n    );\n  }\n\n  render() {\n    return html`\n      <div class=\"facet\">\n        <h3>${this.readableFacetFieldName(this.facetField)}</h3>\n        <hr />\n        <div class=\"facetResults\">\n          <ul>\n            ${this.facetFieldResults.map(\n              (facetFieldResult) => html`\n                ${facetFieldResult.count > 0\n                  ? html`\n                      <li\n                        class=${this.selectedfacetFieldResults.includes(\n                          facetFieldResult.name\n                        )\n                          ? \"selected\"\n                          : \"notSelected\"}\n                      >\n                        <span\n                          class=\"facet-data\"\n                          @click=${() => {\n                            this.handleSelectFacet(facetFieldResult.name);\n                          }}\n                          @keydown=${() => {\n                            /* Placeholder event listener for acessibility */\n                          }}\n                        >\n                          ${facetFieldResult.name} (${facetFieldResult.count})\n                        </span>\n                        ${this.selectedfacetFieldResults.includes(\n                          facetFieldResult.name\n                        )\n                          ? html`\n                              <button\n                                @click=${() =>\n                                  this.handleDeselectFacet(\n                                    facetFieldResult.name\n                                  )}\n                              >\n                                remove\n                              </button>\n                            `\n                          : \"\"}\n                      </li>\n                    `\n                  : html``}\n              `\n            )}\n          </ul>\n        </div>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    .facet {\n      border-radius: 6px;\n      background-color: rgb(255, 255, 255);\n      box-shadow: rgb(136, 136, 136) 1px 1px 6px;\n      padding: 10px;\n      margin-bottom: 15px;\n    }\n\n    .facetResults {\n      max-height: 300px;\n      overflow-y: auto;\n    }\n\n    ul {\n      list-style-type: none;\n      padding: 0;\n      margin: 0;\n    }\n\n    li {\n      margin: 0.2em 0 0.2em 0;\n    }\n\n    .notSelected .facet-data:hover {\n      text-decoration: underline;\n      cursor: pointer;\n    }\n\n    button {\n      background: none;\n      border: none;\n      cursor: pointer;\n      color: red;\n    }\n  `;\n}\n"],"names":["CollectionSurveyorFacet","LitElement","constructor","this","facetField","facetFieldResults","selectedfacetFieldResults","readableFacetFieldName","text","split","map","word","charAt","toUpperCase","slice","join","handleSelectFacet","facetName","includes","emitEvent","facetFieldName","handleDeselectFacet","eventName","detail","dispatchEvent","EventHelpers","createEvent","render","html","facetFieldResult","count","name","styles","css","__decorate","property","type","String","prototype","Array","customElement"],"mappings":"iIAOO,IAAMA,EAAN,cAAsCC,EAAtCC,kCACuBC,KAAUC,WAAG,GAEdD,KAAiBE,kBAAqB,GAEtCF,KAAyBG,0BAAa,EA6HlE,CA3HCC,uBAAuBC,GAMrB,OAHuBA,EAAKC,MAAM,KAAK,GACQA,MAAM,aAGlDC,KAAKC,GAASA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,KACxDC,KAAK,IACT,CAEDC,kBAAkBC,GACXd,KAAKG,0BAA0BY,SAASD,IAC3Cd,KAAKgB,UAAU,iBAAkB,CAC/BC,eAAgBjB,KAAKC,WACrBa,UAAWA,GAGhB,CAEDI,oBAAoBJ,GAClBd,KAAKgB,UAAU,mBAAoB,CACjCC,eAAgBjB,KAAKC,WACrBa,UAAWA,GAEd,CAEOE,UAAUG,EAAmBC,EAAS,IAC5CpB,KAAKqB,cACHC,EAAaC,YAAYJ,EAAWC,EAAS,CAAEA,UAAW,CAAE,GAE/D,CAEDI,SACE,OAAOC,CAAI;;cAEDzB,KAAKI,uBAAuBJ,KAAKC;;;;cAIjCD,KAAKE,kBAAkBK,KACtBmB,GAAqBD,CAAI;kBACtBC,EAAiBC,MAAQ,EACvBF,CAAI;;gCAEQzB,KAAKG,0BAA0BY,SACrCW,EAAiBE,MAEf,WACA;;;;mCAIO,KACP5B,KAAKa,kBAAkBa,EAAiBE,KAAK;qCAEpC;;4BAITF,EAAiBE,SAASF,EAAiBC;;0BAE7C3B,KAAKG,0BAA0BY,SAC/BW,EAAiBE,MAEfH,CAAI;;yCAES,IACPzB,KAAKkB,oBACHQ,EAAiBE;;;;8BAMzB;;sBAGRH,CAAI;;;;;KAOrB,GAEM5B,EAAMgC,OAAGC,CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA7FSC,EAAA,CAA3BC,EAAS,CAAEC,KAAMC,UAA0BrC,EAAAsC,UAAA,kBAAA,GAEjBJ,EAAA,CAA1BC,EAAS,CAAEC,KAAMG,SAAkDvC,EAAAsC,UAAA,yBAAA,GAEzCJ,EAAA,CAA1BC,EAAS,CAAEC,KAAMG,SAAkDvC,EAAAsC,UAAA,iCAAA,GALzDtC,EAAuBkC,EAAA,CADnCM,EAAc,8BACFxC"}