{"version":3,"file":"arch-dataset-teams-selector.js","sources":["../../../../../web-components/src/archSelectAdder/src/arch-select-adder.ts","../../../../../web-components/src/archDatasetTeamsSelector/src/styles.ts","../../../../../web-components/src/archDatasetTeamsSelector/src/arch-dataset-teams-selector.ts"],"sourcesContent":["import { LitElement, TemplateResult, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\n\nimport { DefaultSelectElementPromptText } from \"../../lib/constants\";\n\n@customElement(\"arch-select-adder\")\nexport class ArchSelectAdder<T> extends LitElement {\n  @property({ type: String }) deselectButtonText = \"remove\";\n  @property({ type: Number }) headingLevel = 3;\n  @property({ type: String }) labelGetter!: (obj: T) => string;\n  @property({ type: Array }) options!: Array<T>;\n  @property({ type: Array }) selectedOptions!: Array<T>;\n  @property({ type: Array }) selectedOptionsTitle = \"Selected Options\";\n  @property({ type: String }) selectCtaText = \"Select value to add\";\n  @property({ type: String }) valueGetter!: (obj: T) => string;\n\n  @state() availableOptions: Array<T> = [];\n  @state() disabled = false;\n\n  // Set delegatesFocus=true so that we can restore focus to the job button\n  // on arch-global-modal close.\n  static shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  private heading(text: string): TemplateResult {\n    const { headingLevel } = this;\n    switch (headingLevel) {\n      case 1:\n        return html`<h1>${text}</h1>`;\n        break;\n      case 2:\n        return html`<h2>${text}</h2>`;\n        break;\n      case 3:\n        return html`<h3>${text}</h3>`;\n        break;\n      case 4:\n        return html`<h4>${text}</h4>`;\n        break;\n      case 5:\n        return html`<h5>${text}</h5>`;\n        break;\n      case 6:\n        return html`<h6>${text}</h6>`;\n        break;\n      default:\n        return html``;\n    }\n  }\n\n  render() {\n    const {\n      deselectButtonText,\n      disabled,\n      labelGetter,\n      selectCtaText,\n      selectedOptions,\n      selectedOptionsTitle,\n      valueGetter,\n    } = this;\n\n    this.updateAvailableOptions();\n\n    return html`\n      ${selectedOptions.length === 0\n        ? html``\n        : html`\n            ${this.heading(selectedOptionsTitle)}\n            <ul>\n              ${selectedOptions.map(\n                (x) =>\n                  html`<li>\n                    ${labelGetter(x)}<button\n                      ?disabled=${disabled}\n                      @click=${(e: Event) =>\n                        this.deselectOption(e.target as HTMLButtonElement, x)}\n                    >\n                      ${deselectButtonText}\n                    </button>\n                  </li>`\n              )}\n            </ul>\n          `}\n      ${this.availableOptions.length === 0\n        ? html``\n        : html`\n            <label>\n              ${selectCtaText}\n              <select ?disabled=${disabled} @change=${this.selectHandler}>\n                <option selected value>\n                  ${DefaultSelectElementPromptText}\n                </option>\n                ${this.availableOptions.map(\n                  (x) =>\n                    html`<option value=\"${valueGetter(x)}\">\n                      ${labelGetter(x)}\n                    </option>`\n                )}\n              </select>\n            </label>\n          `}\n    `;\n  }\n\n  updateAvailableOptions() {\n    const { options, selectedOptions, valueGetter } = this;\n    const selectedValues = new Set(selectedOptions.map(valueGetter));\n    this.availableOptions = options.filter(\n      (x) => !selectedValues.has(valueGetter(x))\n    );\n  }\n\n  private selectOption(option: T) {\n    this.selectedOptions.push(option);\n    this.updateAvailableOptions();\n  }\n\n  private get revertFn() {\n    /* Return a function that can be used to revert to the current state. */\n    const currentSelectedOptions = [...this.selectedOptions];\n    return () => {\n      this.selectedOptions = currentSelectedOptions;\n      this.updateAvailableOptions();\n    };\n  }\n\n  private deselectOption(buttonEl: HTMLButtonElement, option: T) {\n    const { revertFn, valueGetter } = this;\n    const optionValue = valueGetter(option);\n    this.selectedOptions = this.selectedOptions.filter(\n      (x) => valueGetter(x) !== optionValue\n    );\n    this.updateAvailableOptions();\n    this.onChange(revertFn, buttonEl);\n  }\n\n  private selectHandler(e: Event) {\n    const { options, revertFn, valueGetter } = this;\n    const selectEl = e.target as HTMLSelectElement;\n    const optionValue = selectEl.value;\n    // Ignore the first placeholder option.\n    if (optionValue === \"\") {\n      return;\n    }\n    this.selectOption(\n      options.find((x) => String(valueGetter(x)) === optionValue) as T\n    );\n    // Ensure that the first, placeholder option is reselected.\n    (selectEl.children[0] as HTMLOptionElement).selected = true;\n    this.onChange(revertFn, selectEl);\n  }\n\n  /**\n   * @param {() => void} revertFn - revert to the previous selected option state\n   * @param {HTMLElement} srcEl - the interactive element that triggered the change\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  onChange(revertFn: () => void, srcEl: HTMLElement) {}\n}\n","import { css } from \"lit\";\n\nimport { global } from \"../../lib/styles\";\n\nexport default [\n  global,\n  css`\n    h3 {\n      margin-block-start: 0;\n      margin-block-end: 0.5rem;\n      font-size: 1rem;\n    }\n\n    ul {\n      line-height: 1.6rem;\n      font-style: italic;\n    }\n\n    button {\n      padding: 0;\n      background-color: transparent;\n      margin-left: 1rem;\n      text-decoration: underline;\n      color: red;\n      font-size: 0.8em;\n    }\n\n    label {\n      margin-left: 1.2rem;\n    }\n\n    select {\n      padding: 0.2rem;\n      border-radius: 8px;\n    }\n  `,\n];\n","import { customElement, property } from \"lit/decorators.js\";\n\nimport { Dataset, Team } from \"../../lib/types\";\nimport ArchAPI from \"../../lib/ArchAPI\";\n\nimport { ArchGlobalModal } from \"../../archGlobalModal\";\nimport { ArchSelectAdder } from \"../../archSelectAdder/index\";\n\nimport styles from \"./styles\";\n\n@customElement(\"arch-dataset-teams-selector\")\nexport class ArchDatasetTeamsSelector extends ArchSelectAdder<Team> {\n  @property({ type: String }) datasetId!: Dataset[\"id\"];\n  @property({ type: Array }) userTeams!: Array<Team>;\n  @property({ type: Array }) datasetTeams!: Array<Team>;\n\n  static styles = styles;\n\n  connectedCallback() {\n    const { userTeams, datasetTeams } = this;\n    this.options = userTeams;\n    this.selectedOptions = datasetTeams;\n    this.deselectButtonText = \"stop sharing\";\n    this.selectCtaText = \"Add a team\";\n    this.selectedOptionsTitle = \"Currently Sharing With\";\n    this.valueGetter = (x) => x.id;\n    this.labelGetter = (x) => x.name;\n    super.connectedCallback();\n  }\n\n  async onChange(revertToPreviousState: () => void, srcEl: HTMLElement) {\n    const { datasetId, selectedOptions: teams } = this;\n    // Disable the inputs while we make the request.\n    this.disabled = true;\n    try {\n      await ArchAPI.datasets.updateTeams(datasetId, teams);\n    } catch (e) {\n      // Restore the previous selected option state and display an error.\n      revertToPreviousState();\n      ArchGlobalModal.showError(\n        \"\",\n        \"Could not update dataset teams. Please try again.\",\n        srcEl\n      );\n    }\n    // Re-enable the inputs.\n    this.disabled = false;\n  }\n}\n\n// Injects the tag into the global name space\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"arch-dataset-teams-selector\": ArchDatasetTeamsSelector;\n  }\n}\n"],"names":["ArchSelectAdder","LitElement","constructor","this","deselectButtonText","headingLevel","selectedOptionsTitle","selectCtaText","availableOptions","disabled","heading","text","html","render","labelGetter","selectedOptions","valueGetter","updateAvailableOptions","length","map","x","e","deselectOption","target","selectHandler","DefaultSelectElementPromptText","options","selectedValues","Set","filter","has","selectOption","option","push","revertFn","currentSelectedOptions","buttonEl","optionValue","onChange","selectEl","value","find","String","children","selected","srcEl","shadowRootOptions","delegatesFocus","__decorate","property","type","prototype","Number","Array","state","customElement","styles","global","css","ArchDatasetTeamsSelector","connectedCallback","userTeams","datasetTeams","id","name","super","async","revertToPreviousState","datasetId","teams","ArchAPI","datasets","updateTeams","ArchGlobalModal","showError"],"mappings":"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"}