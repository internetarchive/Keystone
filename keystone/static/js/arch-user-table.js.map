{"version":3,"file":"arch-user-table.js","sources":["../../../../../web-components/src/archCreateNewUserModal/src/styles.ts","../../../../../web-components/src/archCreateNewUserModal/src/arch-create-new-user-modal.ts","../../../../../web-components/src/archUserTable/src/styles.ts","../../../../../web-components/src/archUserTable/src/arch-user-table.ts"],"sourcesContent":["import { css } from \"lit\";\n\nimport { Bootstrap4Alerts } from \"../../lib/styles\";\nimport { ArchModal } from \"../../archModal/index\";\n\nexport default [\n  ...ArchModal.styles,\n  Bootstrap4Alerts,\n  css`\n    form > label {\n      font-weight: normal;\n      margin-top: 0.5rem;\n      font-size: 0.95rem;\n    }\n\n    form > label:first-child {\n      margin-top: 0;\n    }\n\n    form > label > em {\n      display: block;\n      font-size: 0.9em;\n    }\n\n    form > input,\n    form > select {\n      box-sizing: border-box;\n      width: 100%;\n    }\n\n    form > label[for=\"send-email\"],\n    form > input#send-email {\n      display: inline-block;\n      width: auto;\n    }\n\n    form > label[for=\"send-email\"] {\n      margin-left: 0.5em;\n    }\n\n    div.error {\n      margin-top: 1rem;\n      padding: 0.5rem 0.75rem;\n      display: none;\n    }\n\n    div.error.show {\n      display: block;\n    }\n  `,\n];\n","import { html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators.js\";\nimport ArchAPI from \"../../lib/ArchAPI\";\nimport { ResponseError, User, UserRoles } from \"../../lib/types\";\n\nimport { ArchModal } from \"../../archModal/index\";\n\nimport styles from \"./styles\";\n\n@customElement(\"arch-create-new-user-modal\")\nexport class ArchCreateNewUserModal extends ArchModal {\n  @property({ type: Number }) accountId!: number;\n  @property() onCreate!: () => void;\n\n  @query(\"form\") form!: HTMLFormElement;\n  @query(\"form > input#user-name\") usernameInput!: HTMLInputElement;\n  @query(\"form > input#user-email\") emailInput!: HTMLInputElement;\n  @query(\"div.error\") errorEl!: HTMLElement;\n\n  private set unhandledError(showError: boolean) {\n    const { errorEl } = this;\n    if (showError) {\n      errorEl.classList.add(\"show\");\n    } else {\n      errorEl.classList.remove(\"show\");\n    }\n  }\n\n  static styles = styles;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.scrollable = true;\n    this.modalSize = \"m\";\n    this.title = \"Create a New User\";\n    this.submitButtonText = \"Create\";\n    this.content = html`\n      <form validate>\n        <input type=\"hidden\" name=\"account-id\" value=${this.accountId} />\n\n        <label for=\"user-name\">\n          Username\n          <em>\n            150 characters or fewer. Letters, digits and &quot;@/./+/-/_&quot;\n            only\n          </em>\n        </label>\n        <input\n          id=\"user-name\"\n          name=\"user-name\"\n          type=\"text\"\n          pattern=\"[a-zA-Z0-9@.+-_]+\"\n          required\n          title='150 characters or fewer. Letters, digits and \"@/./+/-/_\" only'\n        />\n\n        <label for=\"first-name\">First Name</label>\n        <input id=\"first-name\" name=\"first-name\" type=\"text\" />\n\n        <label for=\"last-name\">Last Name</label>\n        <input id=\"last-name\" name=\"last-name\" type=\"text\" />\n\n        <label for=\"user-email\">Email</label>\n        <input id=\"user-email\" name=\"user-email\" type=\"email\" required />\n\n        <label for=\"user-role\">Role</label>\n        <select id=\"user-role\" name=\"user-role\" required>\n          ${Object.entries(UserRoles).map(\n            ([k, v]) => html`\n              <option value=\"${v}\" ?selected=${k === \"USER\"}>${k}</option>\n            `\n          )}\n        </select>\n        <input type=\"checkbox\" id=\"send-email\" name=\"send-email\" checked />\n        <label for=\"send-email\">Send welcome email</label>\n      </form>\n      <div class=\"error alert-danger\">\n        Something went wrong. Please try again.\n      </div>\n    `;\n\n    this.addEventListener(\"sp-closed\", this.onCloseHandler.bind(this));\n  }\n\n  submit() {\n    const { form } = this;\n\n    // Validate the form and show any errors.\n    if (!form.checkValidity()) {\n      form.reportValidity();\n      return;\n    }\n\n    const formData = new FormData(this.form);\n    const data: Partial<User> = {\n      account_id: parseInt(formData.get(\"account-id\") as string),\n      email: formData.get(\"user-email\") as string,\n      first_name: formData.get(\"first-name\") as string,\n      last_name: formData.get(\"last-name\") as string,\n      role: formData.get(\"user-role\") as User[\"role\"],\n      username: formData.get(\"user-name\") as string,\n    };\n    this.createUser(data, formData.has(\"send-email\"));\n  }\n\n  private clearErrors() {\n    this.unhandledError = false;\n    if (this.form) {\n      this.usernameInput.setCustomValidity(\"\");\n      this.emailInput.setCustomValidity(\"\");\n    }\n  }\n\n  private clearInputValidityOnChange(inputEl: HTMLInputElement) {\n    /* Clear the custom validity error message for the specified input\n     element on the first \"input\" event using a one-shot handler. */\n    const handler = () => {\n      inputEl.setCustomValidity(\"\");\n      inputEl.removeEventListener(\"input\", handler);\n    };\n    inputEl.addEventListener(\"input\", handler);\n  }\n\n  private createUser(data: Partial<User>, sendWelcomeEmail: boolean) {\n    this.clearErrors();\n    ArchAPI.users\n      .create(data as User, sendWelcomeEmail)\n      .then(() => {\n        this.open = false;\n        this.onCreate();\n      })\n      .catch((error: ResponseError) => {\n        if (error.response?.status !== 400) {\n          // Use assignment to state property instead of mutation to avoid having\n          // to manually invoke this.requestUpdate().\n          this.unhandledError = true;\n        } else {\n          error.response\n            .json()\n            .then((data: { details: string }) => {\n              const { details } = data;\n              let unhandledError = true;\n              // Maybe handle a duplicate username error.\n              if (details.endsWith(\"already exists for field (username)\")) {\n                this.usernameInput.setCustomValidity(\n                  \"A user with this Username already exists.\"\n                );\n                this.usernameInput.reportValidity();\n                this.clearInputValidityOnChange(this.usernameInput);\n                unhandledError = false;\n              }\n\n              // Maybe handle a duplicate email error.\n              if (details.endsWith(\"already exists for field (email)\")) {\n                this.emailInput.setCustomValidity(\n                  \"A user with this Email already exists.\"\n                );\n                this.emailInput.reportValidity();\n                this.clearInputValidityOnChange(this.emailInput);\n                unhandledError = false;\n              }\n\n              // Maybe handle an unknown error.\n              this.unhandledError = unhandledError;\n            })\n            .catch(() => {\n              this.unhandledError = true;\n            });\n        }\n      });\n  }\n\n  onCloseHandler(): void {\n    // ensure any previously entered text in the form field\n    // is reset so it doesn't show on subsequent renders\n    this.form?.reset();\n    this.clearErrors();\n  }\n}\n","import { css } from \"lit\";\n\nexport default [\n  css`\n    data-table > table {\n      table-layout: fixed;\n    }\n\n    data-table > table > thead > tr > th,\n    data-table > table > tbody > tr > td {\n      white-space: nowrap;\n      max-width: none;\n    }\n\n    data-table > table > thead > tr > th.date-created {\n      width: 8em;\n    }\n\n    data-table > table > thead > tr > th.last-login {\n      width: 8em;\n    }\n\n    data-table > table > thead > tr > th.role {\n      width: 5em;\n    }\n  `,\n];\n","import { PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\n\nimport { User, UserRoles } from \"../../lib/types\";\nimport { isoStringToDateString, toTitleCase } from \"../../lib/helpers\";\nimport { Topics } from \"../../lib/pubsub\";\n\nimport { ArchDataTable } from \"../../archDataTable/index\";\n\nimport { ArchCreateNewUserModal } from \"../../archCreateNewUserModal/index\";\nimport { ArchEditUserModal } from \"../../archEditUserModal/index.js\";\n\nimport Styles from \"./styles.js\";\n\n@customElement(\"arch-user-table\")\nexport class ArchUserTable extends ArchDataTable<User> {\n  @property({ type: Number }) accountId!: number;\n  @property({ type: Number }) userId!: number;\n  @property({ type: Boolean }) userIsStaff!: boolean;\n  @property({ type: String }) userRole!: UserRoles;\n\n  @state() createNewUserModalTrigger!: HTMLElement;\n  @state() editUserModal!: ArchEditUserModal;\n  @state() editUserModalTrigger!: HTMLElement;\n\n  static styles = [...ArchDataTable.styles, ...Styles];\n\n  willUpdate(_changedProperties: PropertyValues) {\n    super.willUpdate(_changedProperties);\n    this.actionButtonDisabled = [false, false];\n    // Add selection action buttons if user is staff or admin.\n    const isStaffOrAdmin =\n      this.userIsStaff || this.userRole === UserRoles.ADMIN;\n    if (isStaffOrAdmin) {\n      this.actionButtonLabels = [\"Edit User\"];\n      this.actionButtonSignals = [Topics.DISPLAY_EDIT_USER_MODAL];\n    }\n    this.apiCollectionEndpoint = \"/users\";\n    this.apiStaticParamPairs = [];\n    this.cellRenderers = [\n      undefined,\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      (first_name, user) => {\n        const s = `${first_name as string} ${user.last_name}`;\n        return `<span title=\"${s}\">${s}</span>`;\n      },\n      undefined,\n      (date_joined) =>\n        date_joined ? isoStringToDateString(date_joined as string) : \"\",\n      (last_login) =>\n        last_login ? isoStringToDateString(last_login as string) : \"\",\n      (role) =>\n        Object.keys(UserRoles)[\n          Object.values(UserRoles).indexOf(role as UserRoles)\n        ],\n    ];\n    this.columns = [\n      \"username\",\n      \"first_name\",\n      \"email\",\n      \"date_joined\",\n      \"last_login\",\n      \"role\",\n    ];\n    this.columnHeaders = [\n      \"Username\",\n      \"Full Name\",\n      \"Email\",\n      \"Date Created\",\n      \"Last Login\",\n      \"Role\",\n    ];\n    this.filterableColumns = [false, false, false, false, false, true];\n    this.pageLength = 50;\n    this.persistSearchStateInUrl = false;\n    this.pluralName = \"Account Users\";\n    this.rowClickEnabled = true;\n    this.searchColumns = [\"username\", \"first_name\", \"last_name\", \"email\"];\n    this.searchColumnLabels = this.searchColumns.map(toTitleCase);\n    this.selectable = isStaffOrAdmin;\n    this.singleName = \"Account User\";\n    this.sort = \"username,role\";\n    this.sortableColumns = [true, true, true, true, true, true];\n\n    // Display \"Create User\" button to staff / admin users.\n    if (isStaffOrAdmin) {\n      this.nonSelectionActions = [Topics.DISPLAY_CREATE_USER_MODAL];\n      this.nonSelectionActionLabels = [\"Create New User\"];\n    }\n  }\n\n  _createHiddenModalTriggerButton(): HTMLButtonElement {\n    const el = document.createElement(\"button\");\n    el.setAttribute(\"slot\", \"trigger\");\n    el.style.display = \"none\";\n    return el;\n  }\n\n  render() {\n    // Instantiate the user create modal and create a trigger element.\n    const createNewUserModal = new ArchCreateNewUserModal();\n    createNewUserModal.accountId = this.accountId;\n    createNewUserModal.onCreate = () => void this.dataTable.throttledDoSearch();\n    this.createNewUserModalTrigger = this._createHiddenModalTriggerButton();\n    createNewUserModal.appendChild(this.createNewUserModalTrigger);\n\n    // Instantiate the edit user modal and create a trigger element.\n    this.editUserModal = new ArchEditUserModal();\n    this.editUserModal.userId = this.userId;\n    this.editUserModal.onUpdate = () => void this.dataTable.throttledDoSearch();\n    this.editUserModalTrigger = this._createHiddenModalTriggerButton();\n    this.editUserModal.appendChild(this.editUserModalTrigger);\n\n    return [\n      super.render(),\n      createNewUserModal,\n      this.editUserModal,\n    ] as Array<HTMLElement>;\n  }\n\n  showEditUserModal(user: User) {\n    this.editUserModal.user = user;\n    this.editUserModalTrigger.click();\n  }\n\n  selectionActionHandler(action: string, selectedRows: Array<User>) {\n    switch (action as Topics) {\n      case Topics.DISPLAY_EDIT_USER_MODAL:\n        this.showEditUserModal(selectedRows[0]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  nonSelectionActionHandler(action: string) {\n    switch (action as Topics) {\n      case Topics.DISPLAY_CREATE_USER_MODAL:\n        this.createNewUserModalTrigger.click();\n        break;\n      default:\n        break;\n    }\n  }\n\n  postSelectionChangeHandler(selectedRows: Array<User>) {\n    /* Update DataTable.actionButtonDisabled based on the number\n       of selected rows.\n    */\n    const { dataTable } = this;\n    const { props } = dataTable;\n    const numSelected = selectedRows.length;\n    const editUserEnabled = numSelected === 1;\n    props.actionButtonDisabled = [!editUserEnabled];\n    dataTable.setSelectionActionButtonDisabledState(numSelected === 0);\n  }\n}\n\n// Injects the <ait-user-table> tag into the global name space\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"arch-user-table\": ArchUserTable;\n  }\n}\n"],"names":["styles","ArchModal","Bootstrap4Alerts","css","ArchCreateNewUserModal","unhandledError","showError","errorEl","this","classList","add","remove","connectedCallback","super","scrollable","modalSize","title","submitButtonText","content","html","accountId","Object","entries","UserRoles","map","k","v","addEventListener","onCloseHandler","bind","submit","form","checkValidity","reportValidity","formData","FormData","data","account_id","parseInt","get","email","first_name","last_name","role","username","createUser","has","clearErrors","usernameInput","setCustomValidity","emailInput","clearInputValidityOnChange","inputEl","handler","removeEventListener","sendWelcomeEmail","ArchAPI","users","create","then","open","onCreate","catch","error","response","_a","status","json","details","endsWith","reset","__decorate","property","type","Number","prototype","query","customElement","Styles","ArchUserTable","ArchDataTable","willUpdate","_changedProperties","actionButtonDisabled","isStaffOrAdmin","userIsStaff","userRole","ADMIN","actionButtonLabels","actionButtonSignals","Topics","DISPLAY_EDIT_USER_MODAL","apiCollectionEndpoint","apiStaticParamPairs","cellRenderers","undefined","user","s","date_joined","isoStringToDateString","last_login","keys","values","indexOf","columns","columnHeaders","filterableColumns","pageLength","persistSearchStateInUrl","pluralName","rowClickEnabled","searchColumns","searchColumnLabels","toTitleCase","selectable","singleName","sort","sortableColumns","nonSelectionActions","DISPLAY_CREATE_USER_MODAL","nonSelectionActionLabels","_createHiddenModalTriggerButton","el","document","createElement","setAttribute","style","display","render","createNewUserModal","dataTable","throttledDoSearch","createNewUserModalTrigger","appendChild","editUserModal","ArchEditUserModal","userId","onUpdate","editUserModalTrigger","showEditUserModal","click","selectionActionHandler","action","selectedRows","nonSelectionActionHandler","postSelectionChangeHandler","props","numSelected","length","editUserEnabled","setSelectionActionButtonDisabledState","Boolean","String","state"],"mappings":"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"}