{"version":3,"file":"arch-edit-user-modal.js","sources":["../../../../../web-components/src/archEditUserModal/src/styles.ts","../../../../../web-components/src/archEditUserModal/src/arch-edit-user-modal.ts"],"sourcesContent":["import { css } from \"lit\";\n\nimport { Bootstrap4Alerts } from \"../../lib/styles\";\nimport { ArchModal } from \"../../archModal/index\";\n\nexport default [\n  ...ArchModal.styles,\n  Bootstrap4Alerts,\n  css`\n    form > label {\n      font-weight: normal;\n      margin-top: 0.5rem;\n      font-size: 0.95rem;\n    }\n\n    form > label:first-child {\n      margin-top: 0;\n    }\n\n    form > label > em {\n      display: block;\n      font-size: 0.9em;\n    }\n\n    form > input,\n    form > select {\n      box-sizing: border-box;\n      width: 100%;\n    }\n\n    form > label[for=\"send-email\"],\n    form > input#send-email {\n      display: inline-block;\n      width: auto;\n    }\n\n    select[name=\"user-role\"]:disabled {\n      cursor: not-allowed;\n    }\n\n    form > label[for=\"send-email\"] {\n      margin-left: 0.5em;\n    }\n\n    div.error {\n      margin-top: 1rem;\n      padding: 0.5rem 0.75rem;\n      display: none;\n    }\n\n    div.error.show {\n      display: block;\n    }\n  `,\n];\n","import { html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators.js\";\nimport ArchAPI from \"../../lib/ArchAPI\";\nimport { ResponseError, User, UserRoles } from \"../../lib/types\";\n\nimport { ArchModal } from \"../../archModal/index\";\n\nimport styles from \"./styles\";\n\n@customElement(\"arch-edit-user-modal\")\nexport class ArchEditUserModal extends ArchModal {\n  @property({ type: Number }) userId!: User[\"id\"];\n  @property({ type: Boolean }) profileMode = false;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  @property() onUpdate: (user: User) => void = (user) => null;\n\n  @query(\"form\") form!: HTMLFormElement;\n  @query(\"form > input#user-name\") usernameInput!: HTMLInputElement;\n  @query(\"form > input#user-email\") emailInput!: HTMLInputElement;\n  @query(\"div.error\") errorEl!: HTMLElement;\n\n  private set unhandledError(showError: boolean) {\n    const { errorEl } = this;\n    if (showError) {\n      errorEl.classList.add(\"show\");\n    } else {\n      errorEl.classList.remove(\"show\");\n    }\n  }\n\n  static styles = styles;\n\n  set user(user: undefined | User) {\n    const { profileMode, userId } = this;\n    // Clear the content if user has been set to undefined.\n    if (user === undefined) {\n      this.content = html``;\n      return;\n    }\n    const userIsSelf = user.id === userId;\n    this.content = html`\n      <form validate>\n        <input type=\"hidden\" name=\"id\" value=${user.id} />\n\n        <label for=\"user-name\">\n          Username\n          <em>\n            150 characters or fewer. Letters, digits and &quot;@/./+/-/_&quot;\n            only\n          </em>\n        </label>\n        <input\n          id=\"user-name\"\n          name=\"user-name\"\n          type=\"text\"\n          pattern=\"[a-zA-Z0-9@.+-_]+\"\n          required\n          title='150 characters or fewer. Letters, digits and \"@/./+/-/_\" only'\n          value=${user.username}\n        />\n\n        <label for=\"first-name\">First Name</label>\n        <input\n          id=\"first-name\"\n          name=\"first-name\"\n          type=\"text\"\n          value=${user.first_name}\n        />\n\n        <label for=\"last-name\">Last Name</label>\n        <input\n          id=\"last-name\"\n          name=\"last-name\"\n          type=\"text\"\n          value=${user.last_name}\n        />\n\n        <label for=\"user-email\">Email</label>\n        <input\n          id=\"user-email\"\n          name=\"user-email\"\n          type=\"email\"\n          required\n          value=${user.email}\n        />\n\n        ${profileMode\n          ? html``\n          : html`\n              <label for=\"user-role\">Role</label>\n              <select\n                id=\"user-role\"\n                name=\"user-role\"\n                required\n                ?disabled=${userIsSelf}\n                title=${userIsSelf\n                  ? \"Your role can only be changed by another Admin\"\n                  : \"Select user role\"}\n              >\n                ${Object.entries(UserRoles).map(\n                  ([k, v]) => html`\n                    <option value=\"${v}\" ?selected=${k === user.role}>\n                      ${k}\n                    </option>\n                  `\n                )}\n              </select>\n            `}\n      </form>\n      <div class=\"error alert-danger\">\n        Something went wrong. Please try again.\n      </div>\n    `;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const { profileMode } = this;\n    this.scrollable = true;\n    this.modalSize = \"m\";\n    this.submitButtonText = \"Save\";\n    this.title = profileMode ? \"Edit Profile\" : \"Edit User\";\n    this.addEventListener(\"sp-opened\", this.onOpenHandler.bind(this));\n    this.addEventListener(\"sp-closed\", this.onCloseHandler.bind(this));\n  }\n\n  submit() {\n    const { form } = this;\n\n    // Validate the form and show any errors.\n    if (!form.checkValidity()) {\n      form.reportValidity();\n      return;\n    }\n\n    const formData = new FormData(this.form);\n    const data: Partial<User> = {\n      id: parseInt(formData.get(\"id\") as string),\n      email: formData.get(\"user-email\") as string,\n      first_name: formData.get(\"first-name\") as string,\n      last_name: formData.get(\"last-name\") as string,\n      role: formData.get(\"user-role\") as User[\"role\"],\n      username: formData.get(\"user-name\") as string,\n    };\n    this.updateUser(data);\n  }\n\n  private clearErrors() {\n    this.unhandledError = false;\n    if (this.form) {\n      this.usernameInput.setCustomValidity(\"\");\n      this.emailInput.setCustomValidity(\"\");\n    }\n  }\n\n  private clearInputValidityOnChange(inputEl: HTMLInputElement) {\n    /* Clear the custom validity error message for the specified input\n     element on the first \"input\" event using a one-shot handler. */\n    const handler = () => {\n      inputEl.setCustomValidity(\"\");\n      inputEl.removeEventListener(\"input\", handler);\n    };\n    inputEl.addEventListener(\"input\", handler);\n  }\n\n  private updateUser(data: Partial<User>) {\n    this.clearErrors();\n    ArchAPI.users\n      .update(data as User)\n      .then((user: User) => {\n        this.open = false;\n        // Invoke any registered onUpdate handler and catch/log any error\n        // to prevent triggering display of the modal error element.\n        try {\n          this.onUpdate(user);\n        } catch (e) {\n          console.error(e);\n        }\n      })\n      .catch((error: ResponseError) => {\n        let unhandledError = true;\n        if (error.response?.status === 400) {\n          error.response\n            .json()\n            .then((data: { details: string }) => {\n              const { details } = data;\n              // Maybe handle a duplicate username error.\n              if (details.endsWith(\"already exists for field (username)\")) {\n                this.usernameInput.setCustomValidity(\n                  \"A user with this Username already exists.\"\n                );\n                this.usernameInput.reportValidity();\n                this.clearInputValidityOnChange(this.usernameInput);\n                unhandledError = false;\n              }\n\n              // Maybe handle a duplicate email error.\n              if (details.endsWith(\"already exists for field (email)\")) {\n                this.emailInput.setCustomValidity(\n                  \"A user with this Email already exists.\"\n                );\n                this.emailInput.reportValidity();\n                this.clearInputValidityOnChange(this.emailInput);\n                unhandledError = false;\n              }\n            })\n            .catch(() => null);\n        }\n        this.unhandledError = unhandledError;\n      });\n  }\n\n  onOpenHandler(): void {\n    /* In profile mode, load the user data on each open. */\n    const { profileMode, userId } = this;\n    if (profileMode) {\n      void ArchAPI.users.get(userId).then((user) => (this.user = user));\n    }\n  }\n\n  onCloseHandler(): void {\n    /* Clear error on close, and in profile mode, set user=undefined to prevent\n       a flash of potentially-stale user data prior to fetch completion.\n     */\n    const { profileMode } = this;\n    this.form?.reset();\n    this.clearErrors();\n    if (profileMode) {\n      this.user = undefined;\n    }\n  }\n}\n"],"names":["styles","ArchModal","Bootstrap4Alerts","css","ArchEditUserModal","constructor","this","profileMode","onUpdate","user","unhandledError","showError","errorEl","classList","add","remove","userId","undefined","content","html","userIsSelf","id","username","first_name","last_name","email","Object","entries","UserRoles","map","k","v","role","connectedCallback","super","scrollable","modalSize","submitButtonText","title","addEventListener","onOpenHandler","bind","onCloseHandler","submit","form","checkValidity","reportValidity","formData","FormData","data","parseInt","get","updateUser","clearErrors","usernameInput","setCustomValidity","emailInput","clearInputValidityOnChange","inputEl","handler","removeEventListener","ArchAPI","users","update","then","open","e","console","error","catch","response","_a","status","json","details","endsWith","reset","__decorate","property","type","Number","prototype","Boolean","query","customElement"],"mappings":"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"}