{"version":3,"file":"chunk-ArchAPI.js","sources":["../../../../../web-components/src/lib/ArchAPI.ts"],"sourcesContent":["import {\n  ApiParams,\n  Collection,\n  CollectionIdNamePairs,\n  Dataset,\n  FilteredApiResponse,\n  ObjectApiResponse,\n  ResponseError,\n  User,\n} from \"./types\";\n\nexport default class ArchAPI {\n  static BasePath = \"/api\";\n\n  static CSRF_REGEX = /csrftoken=([^;$]+)/;\n\n  static getCsrfHeader(): { \"X-CSRFToken\"?: string } {\n    /**\n     * Gets an object describing a CSRF header taking the value of the CSRF token\n     * found in session cookie.\n     */\n    const csrfMatch = ArchAPI.CSRF_REGEX.exec(\n      decodeURIComponent(document.cookie)\n    );\n    if (!csrfMatch) {\n      return {};\n    }\n    return { \"X-CSRFToken\": csrfMatch[1] };\n  }\n\n  static async jsonRequest<Item_T, Resp_T>(\n    method: \"GET\" | \"PUT\" | \"PATCH\",\n    path: string,\n    params?: ApiParams<Item_T>,\n    data?: Item_T\n  ): Promise<Resp_T> {\n    // Construct the search params string.\n    const paramsStr = !params\n      ? \"\"\n      : \"?\" +\n        new URLSearchParams(\n          params.map(([k, op, v]) => [\n            `${String(k)}${op === \"!=\" ? \"!\" : \"\"}`,\n            String(v),\n          ])\n        ).toString();\n    let headers = {\n      accept: \"application/json\",\n      \"content-type\": \"application/json\",\n    };\n    let body = null;\n    if (method !== \"GET\" && data) {\n      headers = { ...headers, ...ArchAPI.getCsrfHeader() };\n      body = JSON.stringify(data);\n    }\n    const res = await fetch(`${ArchAPI.BasePath}${path}${paramsStr}`, {\n      method,\n      headers,\n      body,\n    });\n    return new Promise((resolve, reject) =>\n      !res.ok\n        ? reject(new ResponseError(res))\n        : void res\n            .json()\n            .then((data) => resolve(data as Resp_T))\n            .catch(() => reject(new Error(\"could not decode response\")))\n    );\n  }\n\n  static get collections() {\n    return {\n      get: (params: ApiParams<Collection> = []) =>\n        ArchAPI.jsonRequest<Collection, FilteredApiResponse<Collection>>(\n          \"GET\",\n          \"/collections\",\n          params\n        ),\n    };\n  }\n\n  static get datasets() {\n    return {\n      get: (params: ApiParams<Dataset> = []) =>\n        ArchAPI.jsonRequest<Dataset, FilteredApiResponse<Dataset>>(\n          \"GET\",\n          \"/datasets\",\n          params\n        ),\n    };\n  }\n\n  static get users() {\n    return {\n      get: (userId: User[\"id\"]) =>\n        ArchAPI.jsonRequest<User, ObjectApiResponse<User>>(\n          \"GET\",\n          `/users/${userId}`\n        ),\n      create: (user: Partial<User>, sendWelcomeEmail: boolean) =>\n        ArchAPI.jsonRequest<Partial<User>, ObjectApiResponse<User>>(\n          \"PUT\",\n          `/users?send_welcome=${JSON.stringify(sendWelcomeEmail)}`,\n          undefined,\n          user\n        ),\n      update: (user: Partial<User>) =>\n        ArchAPI.jsonRequest<Partial<User>, ObjectApiResponse<User>>(\n          \"PATCH\",\n          `/users/${user.id as number}`,\n          undefined,\n          user\n        ),\n    };\n  }\n\n  static async allCollectionIdNamePairs(\n    accountId: number\n  ): Promise<CollectionIdNamePairs> {\n    return (\n      (\n        await ArchAPI.jsonRequest<Collection, FilteredApiResponse<Collection>>(\n          \"GET\",\n          \"/collections\",\n          [[\"account_id\", \"=\", accountId]]\n        )\n      ).items as Array<Collection>\n    ).map((c) => [c.id, c.name]) as CollectionIdNamePairs;\n  }\n}\n"],"names":["ArchAPI","static","csrfMatch","CSRF_REGEX","exec","decodeURIComponent","document","cookie","method","path","params","data","paramsStr","URLSearchParams","map","k","op","v","String","toString","headers","accept","body","getCsrfHeader","JSON","stringify","res","fetch","BasePath","Promise","resolve","reject","ok","json","then","catch","Error","ResponseError","collections","get","jsonRequest","datasets","users","userId","create","user","sendWelcomeEmail","undefined","update","id","accountId","items","c","name"],"mappings":"qCAWc,MAAOA,EAKnBC,uBAKE,MAAMC,EAAYF,EAAQG,WAAWC,KACnCC,mBAAmBC,SAASC,SAE9B,OAAKL,EAGE,CAAE,cAAeA,EAAU,IAFzB,EAGV,CAEDD,yBACEO,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAaF,EAEf,IACA,IAAIG,gBACFH,EAAOI,KAAI,EAAEC,EAAGC,EAAIC,KAAO,CACzB,GAAGC,OAAOH,KAAY,OAAPC,EAAc,IAAM,KACnCE,OAAOD,OAETE,WAPF,GAQJ,IAAIC,EAAU,CACZC,OAAQ,mBACR,eAAgB,oBAEdC,EAAO,KACI,QAAXd,GAAoBG,IACtBS,EAAU,IAAKA,KAAYpB,EAAQuB,iBACnCD,EAAOE,KAAKC,UAAUd,IAExB,MAAMe,QAAYC,MAAM,GAAG3B,EAAQ4B,WAAWnB,IAAOG,IAAa,CAChEJ,SACAY,UACAE,SAEF,OAAO,IAAIO,SAAQ,CAACC,EAASC,IAC1BL,EAAIM,QAEIN,EACFO,OACAC,MAAMvB,GAASmB,EAAQnB,KACvBwB,OAAM,IAAMJ,EAAO,IAAIK,MAAM,gCAJhCL,EAAO,IAAIM,EAAcX,KAMhC,CAEUY,yBACT,MAAO,CACLC,IAAK,CAAC7B,EAAgC,KACpCV,EAAQwC,YACN,MACA,eACA9B,GAGP,CAEU+B,sBACT,MAAO,CACLF,IAAK,CAAC7B,EAA6B,KACjCV,EAAQwC,YACN,MACA,YACA9B,GAGP,CAEUgC,mBACT,MAAO,CACLH,IAAMI,GACJ3C,EAAQwC,YACN,MACA,UAAUG,KAEdC,OAAQ,CAACC,EAAqBC,IAC5B9C,EAAQwC,YACN,MACA,uBAAuBhB,KAAKC,UAAUqB,UACtCC,EACAF,GAEJG,OAASH,GACP7C,EAAQwC,YACN,QACA,UAAUK,EAAKI,UACfF,EACAF,GAGP,CAED5C,sCACEiD,GAEA,aAEUlD,EAAQwC,YACZ,MACA,eACA,CAAC,CAAC,aAAc,IAAKU,MAEvBC,MACFrC,KAAKsC,GAAM,CAACA,EAAEH,GAAIG,EAAEC,OACvB,EApHMrD,EAAQ4B,SAAG,OAEX5B,EAAUG,WAAG"}