import{R as e}from"./chunk-types.js";class t{static getCsrfHeader(){const e=t.CSRF_REGEX.exec(decodeURIComponent(document.cookie));return e?{"X-CSRFToken":e[1]}:{}}static async jsonRequest(s,n,o,a){const c=o?"?"+new URLSearchParams(o.map((([e,t,s])=>[`${String(e)}${"!="===t?"!":""}`,String(s)]))).toString():"";let r={accept:"application/json","content-type":"application/json"},i=null;"GET"!==s&&a&&(r={...r,...t.getCsrfHeader()},i=JSON.stringify(a));const u=await fetch(`${t.BasePath}${n}${c}`,{method:s,headers:r,body:i});return new Promise(((t,s)=>u.ok?void u.json().then((e=>t(e))).catch((()=>s(new Error("could not decode response")))):s(new e(u))))}static get collections(){return{get:(e=[])=>t.jsonRequest("GET","/collections",e)}}static get datasets(){return{get:(e=[])=>t.jsonRequest("GET","/datasets",e)}}static get users(){return{get:e=>t.jsonRequest("GET",`/users/${e}`),create:(e,s)=>t.jsonRequest("PUT",`/users?send_welcome=${JSON.stringify(s)}`,void 0,e),update:e=>t.jsonRequest("PATCH",`/users/${e.id}`,void 0,e)}}static async allCollectionIdNamePairs(e){return(await t.jsonRequest("GET","/collections",[["account_id","=",e]])).items.map((e=>[e.id,e.name]))}}t.BasePath="/api",t.CSRF_REGEX=/csrftoken=([^;$]+)/;export{t as A};
//# sourceMappingURL=chunk-ArchAPI.js.map
