{"version":3,"file":"chunk-collection-surveyor-cart.js","sources":["../../../../../web-components/src/lib/webservices/src/lib/helpers.ts","../../../../../web-components/src/collectionSurveyorCart/src/collection-surveyor-cart.ts"],"sourcesContent":["// https://stackoverflow.com/a/49286056\nexport type ValueOf<T> = T[keyof T];\n\n// Escape a string for inclusion as an element attribute value.\nexport function htmlAttrEscape(s: string): string {\n  return s.replace(/\"/g, \"&quot;\");\n}\n\nexport function humanBytes(bytes: number, decPlaces = 3): string {\n  for (const prefix of [\"\", \"Ki\", \"Mi\", \"Gi\", \"Ti\", \"Pi\"]) {\n    if (bytes < 1024) {\n      const [whole, frac] = bytes.toString().split(\".\");\n      return `${whole}${frac ? `.${frac.slice(0, decPlaces)}` : \"\"} ${prefix}B`;\n    }\n    bytes /= 1024;\n  }\n  return \"\";\n}\n\nexport function toTitleCase(text: string): string {\n  if (text.includes(\"_\")) {\n    text = text.replaceAll(\"_\", \" \");\n  }\n  const textArray = text.split(\" \");\n  // Eg: pre_deposit_modified_at ---> Pre Deposit Modified At\n  return textArray\n    .map((word) => {\n      return word[0].toUpperCase() + word.slice(1, word.length);\n    })\n    .join(\" \");\n}\n\nexport function isoStringToDateString(\n  timestamp: string | Date,\n  includeTime = false\n): string {\n  const dayConfig: Intl.DateTimeFormatOptions = {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  };\n  const timeConfig: Intl.DateTimeFormatOptions = {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    timeZoneName: \"short\",\n  };\n  return includeTime\n    ? new Date(timestamp).toLocaleTimeString(navigator.language, {\n        ...dayConfig,\n        ...timeConfig,\n      })\n    : new Date(timestamp).toLocaleDateString(navigator.language, dayConfig);\n}\n","import { html, css, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\n\nimport { CollectionSelectedDetail } from \"../../lib/types\";\n\nimport { humanBytes } from \"../../lib/webservices/src/lib/helpers\";\nimport { EventHelpers } from \"../../lib/eventHelpers\";\n\n@customElement(\"collection-surveyor-cart\")\nexport class CollectionSurveyorCart extends LitElement {\n  @property({ type: Object })\n  collectionsInCart: { [collectionName: string]: CollectionSelectedDetail } =\n    {};\n\n  private get totalCollectionSizeSelected(): number {\n    // sum collectionSize (bytes) from each selected collection\n    const collectionSum = Object.values(this.collectionsInCart).reduce(\n      (current, acc) => current + Number(acc.collectionSize),\n      0\n    );\n\n    return collectionSum;\n  }\n\n  handleRemoveCollectionFromCart(collectionName: string) {\n    this.emitEvent(\"collection-removed-from-cart\", { collectionName });\n  }\n\n  private emitEvent(eventName: string, detail = {}) {\n    this.dispatchEvent(\n      EventHelpers.createEvent(eventName, detail ? { detail } : {})\n    );\n  }\n\n  render() {\n    return html`\n      <div class=\"cart-container\">\n        <div class=\"collections-cart \">\n          <h3>Collections Selected:</h3>\n          <ul>\n            ${Object.entries(this.collectionsInCart).map(\n              ([collectionName, value]) => html`\n                <li>\n                  ${collectionName}, Collection ID: ${value.collectionId},\n                  Collection Size: ${humanBytes(Number(value.collectionSize))}\n                  <button\n                    @click=${() =>\n                      this.handleRemoveCollectionFromCart(collectionName)}\n                  >\n                    remove\n                  </button>\n                </li>\n              `\n            )}\n          </ul>\n          <h3>\n            Total Collection Size Selected:\n            <span class=\"totalSizeSelected\"\n              >${humanBytes(this.totalCollectionSizeSelected)}</span\n            >\n          </h3>\n        </div>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    .cart-container {\n      padding: 20px 50px;\n    }\n    .collections-cart {\n      padding: 20px;\n      border-radius: 6px;\n      background-color: rgb(255, 255, 255);\n      box-shadow: rgb(136, 136, 136) 1px 1px 6px;\n    }\n    .totalSizeSelected {\n      font-weight: normal;\n    }\n    button {\n      background: none;\n      border: none;\n      cursor: pointer;\n      color: red;\n      text-decoration: underline;\n    }\n  `;\n}\n"],"names":["humanBytes","bytes","decPlaces","prefix","whole","frac","toString","split","slice","CollectionSurveyorCart","LitElement","constructor","this","collectionsInCart","totalCollectionSizeSelected","Object","values","reduce","current","acc","Number","collectionSize","handleRemoveCollectionFromCart","collectionName","emitEvent","eventName","detail","dispatchEvent","EventHelpers","createEvent","render","html","entries","map","value","collectionId","styles","css","__decorate","property","type","prototype","customElement"],"mappings":"+IAQgBA,EAAWC,EAAeC,EAAY,GACpD,IAAK,MAAMC,IAAU,CAAC,GAAI,KAAM,KAAM,KAAM,KAAM,MAAO,CACvD,GAAIF,EAAQ,KAAM,CAChB,MAAOG,EAAOC,GAAQJ,EAAMK,WAAWC,MAAM,KAC7C,MAAO,GAAGH,IAAQC,EAAO,IAAIA,EAAKG,MAAM,EAAGN,KAAe,MAAMC,IACjE,CACDF,GAAS,IACV,CACD,MAAO,EACT,CCRO,IAAMQ,EAAN,cAAqCC,EAArCC,kCAELC,KAAiBC,kBACf,EA2EH,CAzEaC,kCAOV,OALsBC,OAAOC,OAAOJ,KAAKC,mBAAmBI,QAC1D,CAACC,EAASC,IAAQD,EAAUE,OAAOD,EAAIE,iBACvC,EAIH,CAEDC,+BAA+BC,GAC7BX,KAAKY,UAAU,+BAAgC,CAAED,kBAClD,CAEOC,UAAUC,EAAmBC,EAAS,IAC5Cd,KAAKe,cACHC,EAAaC,YAAYJ,EAAWC,EAAS,CAAEA,UAAW,CAAE,GAE/D,CAEDI,SACE,OAAOC,CAAI;;;;;cAKDhB,OAAOiB,QAAQpB,KAAKC,mBAAmBoB,KACvC,EAAEV,EAAgBW,KAAWH,CAAI;;oBAE3BR,qBAAkCW,EAAMC;qCACvBnC,EAAWoB,OAAOc,EAAMb;;6BAEhC,IACPT,KAAKU,+BAA+BC;;;;;;;;;;iBAWzCvB,EAAWY,KAAKE;;;;;KAM9B,GAEML,EAAM2B,OAAGC,CAAG;;;;;;;;;;;;;;;;;;;;IAvDnBC,EAAA,CADCC,EAAS,CAAEC,KAAMzB,UAEbN,EAAAgC,UAAA,yBAAA,GAHMhC,EAAsB6B,EAAA,CADlCI,EAAc,6BACFjC"}