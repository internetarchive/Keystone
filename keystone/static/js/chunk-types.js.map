{"version":3,"file":"chunk-types.js","sources":["../../../../../web-components/src/lib/types.ts"],"sourcesContent":["import { JSONSchemaType } from \"ajv\";\nimport { SomeJSONSchema } from \"ajv/lib/types/json-schema\";\n\nexport { SomeJSONSchema };\n\nimport { ArchJobCard } from \"../archGenerateDatasetForm/src/arch-job-card\";\n\nexport type ValueOf<T> = T[keyof T];\n\nexport enum ProcessingState {\n  SUBMITTED = \"SUBMITTED\",\n  QUEUED = \"QUEUED\",\n  RUNNING = \"RUNNING\",\n  FINISHED = \"FINISHED\",\n  FAILED = \"FAILED\",\n  CANCELLED = \"CANCELLED\",\n}\n\nexport type AITCollectionMetadata = {\n  is_public?: boolean;\n  num_seeds?: number;\n  last_crawl_date?: Date;\n};\n\nexport type CustomCollectionMetadata = {\n  state: ProcessingState;\n};\n\nexport enum CollectionType {\n  AIT = \"AIT\",\n  SPECIAL = \"SPECIAL\",\n  CUSTOM = \"CUSTOM\",\n}\n\nexport type Collection = {\n  account_id: number;\n  id: number;\n  name: string;\n  collection_type: CollectionType;\n  size_bytes: number;\n  dataset_count: number;\n  latest_dataset: {\n    id: number;\n    name: string;\n    start_time: Date;\n  };\n  metadata: AITCollectionMetadata | CustomCollectionMetadata;\n};\n\nexport type CollectionIdNamePairs = Array<\n  [Collection[\"id\"], Collection[\"name\"]]\n>;\n\nexport interface CollectionSearchResult {\n  organizationId: number;\n  organizationName: string;\n  collectionName: string;\n  collectionId: number;\n  meta_Description?: string;\n  totalWarcBytes: number;\n}\n\nexport interface CollectionCheckboxEventDetail {\n  collectionSize: string;\n  isChecked: boolean;\n  collectionName: string;\n  collectionId: string;\n}\n\nexport interface CollectionSelectedDetail {\n  collectionSize: string;\n  collectionId: string;\n}\n\nexport interface Facets {\n  [key: string]: Array<string | number>;\n}\n\nexport interface FacetResultMap {\n  name: string;\n  count: number;\n}\n\nexport interface CollectionRemovedFromCartDetail {\n  collectionName: string;\n}\n\nexport type Dataset = {\n  category_name: string;\n  collection_id: number;\n  collection_name: string;\n  finished_time: Date;\n  id: number;\n  is_sample: boolean;\n  job_id: string;\n  name: string;\n  start_time: Date;\n  state: ProcessingState;\n};\n\ntype DatasetStartTimeString = string;\n\nexport type JobIdStatesMap = Record<\n  Dataset[\"job_id\"],\n  Array<[Dataset[\"id\"], DatasetStartTimeString, Dataset[\"state\"]]>\n>;\n\nexport enum UserRoles {\n  ADMIN = \"ADMIN\",\n  USER = \"USER\",\n}\n\nexport type User = {\n  id: number;\n  account_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  role: UserRoles;\n  date_joined: Date;\n  last_login: Date;\n};\n\n// AvailableJob parameters types\n\ntype GlobalJobParameters = {\n  sample: boolean;\n};\n\ntype NamedEntityExtractionParameters = GlobalJobParameters & {\n  language: string;\n};\n\nexport type JobParameters = NamedEntityExtractionParameters;\nexport type JobParametersKey = keyof JobParameters;\nexport type JobParametersValue = JobParameters[JobParametersKey];\n\n// Datasets objects are also used to convey job state.\nexport type JobState = Dataset;\n\nexport enum JobId {\n  ArsLgaGeneration = \"ArsLgaGeneration\",\n  ArsWaneGeneration = \"ArsWaneGeneration\",\n  ArsWatGeneration = \"ArsWatGeneration\",\n  AudioInformationExtraction = \"AudioInformationExtraction\",\n  DomainFrequencyExtraction = \"DomainFrequencyExtraction\",\n  DomainGraphExtraction = \"DomainGraphExtraction\",\n  ImageGraphExtraction = \"ImageGraphExtraction\",\n  ImageInformationExtraction = \"ImageInformationExtraction\",\n  PdfInformationExtraction = \"PdfInformationExtraction\",\n  PresentationProgramInformationExtraction = \"PresentationProgramInformationExtraction\",\n  SpreadsheetInformationExtraction = \"SpreadsheetInformationExtraction\",\n  TextFilesInformationExtraction = \"TextFilesInformationExtraction\",\n  VideoInformationExtraction = \"VideoInformationExtraction\",\n  WebGraphExtraction = \"WebGraphExtraction\",\n  WebPagesExtraction = \"WebPagesExtraction\",\n  WordProcessorInformationExtraction = \"WordProcessorInformationExtraction\",\n}\n\nexport type AvailableJob = {\n  id: JobId;\n  name: string;\n  description: string;\n  parameters_schema: JSONSchemaType<JobParameters>;\n};\n\nexport type AvailableJobsCategory = {\n  categoryName: string;\n  categoryDescription: string;\n  categoryImage: string;\n  categoryId: string;\n  jobs: Array<AvailableJob>;\n};\n\nexport type AvailableJobs = Array<AvailableJobsCategory>;\n\nexport type PublishedDatasetInfo = {\n  item: string;\n  source: string;\n  collection: string;\n  job: JobId;\n  complete: boolean;\n  sample: boolean;\n  time: Date;\n  ark: string;\n};\n\nexport type PublishedDatasetMetadataApiResponse = {\n  creator?: Array<string>;\n  description?: Array<string>;\n  licenseurl?: Array<string>;\n  subject?: Array<string>;\n  title?: Array<string>;\n};\n\nexport type PublishedDatasetMetadata = {\n  creator?: Array<string>;\n  description?: string;\n  licenseurl?: string;\n  subject?: Array<string>;\n  title?: string;\n};\n\nexport type PublishedDatasetMetadataKey = keyof PublishedDatasetMetadata;\n\nexport type PublishedDatasetMetadataValue =\n  PublishedDatasetMetadata[PublishedDatasetMetadataKey];\n\nexport type PublishedDatasetMetadataJSONSchema =\n  JSONSchemaType<PublishedDatasetMetadata>;\n\nexport type PublishedDatasetMetadataJSONSchemaProps = Record<\n  keyof PublishedDatasetMetadata,\n  SomeJSONSchema\n>;\n\n// API Types\n\nexport type BaseFilteredApiResponse<T> = {\n  count: number;\n  items: T;\n};\n\ntype FilteredApiResults<T> = Array<T>;\n\ntype DistinctApiResults<T> = Array<T[keyof T]>;\n\nexport type FilteredApiResponse<T> = BaseFilteredApiResponse<\n  FilteredApiResults<T>\n>;\n\nexport type DistinctApiResponse<T> = BaseFilteredApiResponse<\n  DistinctApiResults<T>\n>;\n\nexport type ObjectApiResponse<T> = T;\n\nexport type ApiResponse<T> =\n  | FilteredApiResponse<T>\n  | DistinctApiResponse<T>\n  | ObjectApiResponse<T>;\n\nexport class ResponseError extends Error {\n  constructor(public response: Response, msg?: string) {\n    super(msg);\n  }\n}\n\ntype ApiParamOp = \"=\" | \"!=\";\n\ntype ApiFilterKey = \"distinct\" | \"limit\" | \"offset\" | \"search\" | \"sort\";\n\nexport type ApiParams<T> = Array<\n  [keyof T | ApiFilterKey, ApiParamOp, string | number | boolean]\n>;\n\n// Custom Events\n\nexport type GenerateDatasetDetail = {\n  archJobCard: ArchJobCard;\n};\n\nexport type GlobalModalDetail = {\n  elementToFocusOnClose: HTMLElement;\n  title: string;\n  message: string;\n};\n"],"names":["ProcessingState","CollectionType","UserRoles","JobId","ResponseError","Error","constructor","response","msg","super","this"],"mappings":"IASYA,EAmBAC,EA+EAC,EAkCAC,GApIZ,SAAYH,GACVA,EAAA,UAAA,YACAA,EAAA,OAAA,SACAA,EAAA,QAAA,UACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,UAAA,WACD,CAPD,CAAYA,IAAAA,EAOX,CAAA,IAYD,SAAYC,GACVA,EAAA,IAAA,MACAA,EAAA,QAAA,UACAA,EAAA,OAAA,QACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,IA2ED,SAAYC,GACVA,EAAA,MAAA,QACAA,EAAA,KAAA,MACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,IA+BD,SAAYC,GACVA,EAAA,iBAAA,mBACAA,EAAA,kBAAA,oBACAA,EAAA,iBAAA,mBACAA,EAAA,2BAAA,6BACAA,EAAA,0BAAA,4BACAA,EAAA,sBAAA,wBACAA,EAAA,qBAAA,uBACAA,EAAA,2BAAA,6BACAA,EAAA,yBAAA,2BACAA,EAAA,yCAAA,2CACAA,EAAA,iCAAA,mCACAA,EAAA,+BAAA,iCACAA,EAAA,2BAAA,6BACAA,EAAA,mBAAA,qBACAA,EAAA,mBAAA,qBACAA,EAAA,mCAAA,oCACD,CAjBD,CAAYA,IAAAA,EAiBX,CAAA,IAqFK,MAAOC,UAAsBC,MACjCC,YAAmBC,EAAoBC,GACrCC,MAAMD,GADWE,KAAQH,SAARA,CAElB"}