"""
Django settings for keystone project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from dotenv import dotenv_values


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = {
    **dotenv_values(BASE_DIR / ".env"),
    **os.environ,  # override loaded values with environment variables
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.get(
    "KEYSTONE_DJANGO_SECRET_KEY",
    "devsecretkeyljkadfadfsjkl9ew0f02iefj20h8310hknsnlasd172yo1lnimposimfn",
)
PRIVATE_API_KEY = env.get("KEYSTONE_PRIVATE_API_KEY", "supersecret")

AIT_DB_HOST = env.get("KEYSTONE_AIT_DB_HOST", "")
AIT_DB_NAME = env.get("KEYSTONE_AIT_DB_NAME", "")
AIT_DB_PORT = env.get("KEYSTONE_AIT_DB_PORT", "")
AIT_DB_USER = env.get("KEYSTONE_AIT_DB_USER", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.get("KEYSTONE_DJANGO_DEBUG", "false") == "true"

ALLOWED_HOSTS = (
    [
        "localhost",
        "127.0.0.1",
        "[::1]",
        "host.docker.internal",
    ]
    + (env.get("KEYSTONE_DJANGO_ALLOWED_HOSTS", "")).split(" ")
    if env.get("KEYSTONE_DJANGO_ALLOWED_HOSTS")
    else []
)

CSRF_TRUSTED_ORIGINS = (
    env.get("KEYSTONE_DJANGO_CSRF_TRUSTED_ORIGINS", "").split(" ")
    if env.get("KEYSTONE_DJANGO_CSRF_TRUSTED_ORIGINS")
    else []
)

VAULT_TEAM_EMAIL = "avdempsey@archive.org"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "keystone",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [BASE_DIR / "templates/jinja2"],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "config.jinja2env.environment",
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "DIRS": [BASE_DIR / "templates"],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env.get("KEYSTONE_POSTGRES_NAME", "keystone"),
        "USER": env.get("KEYSTONE_POSTGRES_USER", "keystone"),
        "PASSWORD": env.get("KEYSTONE_POSTGRES_PASSWORD", "keystone"),
        "HOST": env.get("KEYSTONE_POSTGRES_HOST", "127.0.0.1"),
        "PORT": env.get("KEYSTONE_POSTGRES_PORT", "5433"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
    }
}

AUTH_USER_MODEL = "keystone.User"
SESSION_COOKIE_NAME = "keystone-session-id"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "keystone.hashers.PBKDF2WrappedSha1PasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "/opt/keystone/staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "formatter": "verbose",
            "filename": env.get("KEYSTONE_LOG_FILE_PATH", "/var/log/keystone.log"),
        },
    },
    "loggers": {"root": {"handlers": ["file"]}},
}
